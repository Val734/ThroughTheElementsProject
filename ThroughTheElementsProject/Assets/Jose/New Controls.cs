//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Jose/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5157ac59-e549-483f-a7c5-676a7f0e3e3c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4809901b-b31f-4fb7-a472-c45ff4b5c38a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""cda4c080-3acb-461d-9bcb-2755ef62e7bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a69e3aae-6a7e-42d8-80eb-f2555bd3056e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lock"",
                    ""type"": ""Button"",
                    ""id"": ""0febfbef-8e45-434c-8382-edb42634ff98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeTarget"",
                    ""type"": ""Button"",
                    ""id"": ""ab5bdfe2-5a8a-48b4-ae0d-ecd10c52f3e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""056dd21e-46ef-475d-b8b5-fefbbaa2aac2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gas"",
                    ""type"": ""Button"",
                    ""id"": ""0eda6db5-1bab-4b6f-9710-d41543f1a139"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Liquid"",
                    ""type"": ""Button"",
                    ""id"": ""2a2080e2-dd3b-44b4-bc79-da0e33d7e1cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Solid"",
                    ""type"": ""Button"",
                    ""id"": ""65025fa6-a8a9-42a1-ac17-d723bfd7db92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Plasma"",
                    ""type"": ""Button"",
                    ""id"": ""8d78aa51-53b9-414b-a4a0-a7b7d4ddee03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""b319ea2d-9d86-424c-99bf-2f881ed4618f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hability"",
                    ""type"": ""Button"",
                    ""id"": ""94a8dcad-84ef-410c-93a6-82c7eb37fa20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BaseAttack"",
                    ""type"": ""Button"",
                    ""id"": ""bffa2d39-35be-4844-b319-23c21a8a22fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42032e6c-e3bc-48b8-abdd-eef8bdfc9a8c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4744a2bf-aa47-4f5b-9435-990c2187dc12"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce05c5f8-f224-4373-b7a4-06308506887b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db94765d-ac6e-4d19-a164-ec5bcd0ee798"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4535aaed-7716-48b7-ac15-dcc984e9c713"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5212df99-397e-46b5-873d-05dc7657d4cc"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1058502-3382-46a3-934e-eaa4b1977aa4"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Solid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aafa8c65-e6ac-4f11-a293-2c2ddad41a95"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Plasma"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90555670-c72e-4102-a2ef-654bc3fb334d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d962bfc-779b-4d85-be0e-342779d65e7b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1163a0a-3ad1-4819-be71-52ed3189d4cc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BaseAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""251230d3-ceb3-4629-b4c6-58ef578dbeac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41bd09ab-26a7-4d38-820c-62cd8c6a0526"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24bd0ed5-9840-4e43-9eee-75f07e17f3f7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4b054955-45b4-40a8-9735-18e323d8ad41"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2ae845a-2727-474b-8119-2f514ce65c66"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""daa1bff7-a34f-4e47-91a1-1031fb3c36fe"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Liquid"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Lock = m_Player.FindAction("Lock", throwIfNotFound: true);
        m_Player_ChangeTarget = m_Player.FindAction("ChangeTarget", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Gas = m_Player.FindAction("Gas", throwIfNotFound: true);
        m_Player_Liquid = m_Player.FindAction("Liquid", throwIfNotFound: true);
        m_Player_Solid = m_Player.FindAction("Solid", throwIfNotFound: true);
        m_Player_Plasma = m_Player.FindAction("Plasma", throwIfNotFound: true);
        m_Player_Transform = m_Player.FindAction("Transform", throwIfNotFound: true);
        m_Player_Hability = m_Player.FindAction("Hability", throwIfNotFound: true);
        m_Player_BaseAttack = m_Player.FindAction("BaseAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Run;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Lock;
    private readonly InputAction m_Player_ChangeTarget;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Gas;
    private readonly InputAction m_Player_Liquid;
    private readonly InputAction m_Player_Solid;
    private readonly InputAction m_Player_Plasma;
    private readonly InputAction m_Player_Transform;
    private readonly InputAction m_Player_Hability;
    private readonly InputAction m_Player_BaseAttack;
    public struct PlayerActions
    {
        private @NewControls m_Wrapper;
        public PlayerActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Run => m_Wrapper.m_Player_Run;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Lock => m_Wrapper.m_Player_Lock;
        public InputAction @ChangeTarget => m_Wrapper.m_Player_ChangeTarget;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Gas => m_Wrapper.m_Player_Gas;
        public InputAction @Liquid => m_Wrapper.m_Player_Liquid;
        public InputAction @Solid => m_Wrapper.m_Player_Solid;
        public InputAction @Plasma => m_Wrapper.m_Player_Plasma;
        public InputAction @Transform => m_Wrapper.m_Player_Transform;
        public InputAction @Hability => m_Wrapper.m_Player_Hability;
        public InputAction @BaseAttack => m_Wrapper.m_Player_BaseAttack;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Lock.started += instance.OnLock;
            @Lock.performed += instance.OnLock;
            @Lock.canceled += instance.OnLock;
            @ChangeTarget.started += instance.OnChangeTarget;
            @ChangeTarget.performed += instance.OnChangeTarget;
            @ChangeTarget.canceled += instance.OnChangeTarget;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Gas.started += instance.OnGas;
            @Gas.performed += instance.OnGas;
            @Gas.canceled += instance.OnGas;
            @Liquid.started += instance.OnLiquid;
            @Liquid.performed += instance.OnLiquid;
            @Liquid.canceled += instance.OnLiquid;
            @Solid.started += instance.OnSolid;
            @Solid.performed += instance.OnSolid;
            @Solid.canceled += instance.OnSolid;
            @Plasma.started += instance.OnPlasma;
            @Plasma.performed += instance.OnPlasma;
            @Plasma.canceled += instance.OnPlasma;
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
            @Hability.started += instance.OnHability;
            @Hability.performed += instance.OnHability;
            @Hability.canceled += instance.OnHability;
            @BaseAttack.started += instance.OnBaseAttack;
            @BaseAttack.performed += instance.OnBaseAttack;
            @BaseAttack.canceled += instance.OnBaseAttack;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Lock.started -= instance.OnLock;
            @Lock.performed -= instance.OnLock;
            @Lock.canceled -= instance.OnLock;
            @ChangeTarget.started -= instance.OnChangeTarget;
            @ChangeTarget.performed -= instance.OnChangeTarget;
            @ChangeTarget.canceled -= instance.OnChangeTarget;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Gas.started -= instance.OnGas;
            @Gas.performed -= instance.OnGas;
            @Gas.canceled -= instance.OnGas;
            @Liquid.started -= instance.OnLiquid;
            @Liquid.performed -= instance.OnLiquid;
            @Liquid.canceled -= instance.OnLiquid;
            @Solid.started -= instance.OnSolid;
            @Solid.performed -= instance.OnSolid;
            @Solid.canceled -= instance.OnSolid;
            @Plasma.started -= instance.OnPlasma;
            @Plasma.performed -= instance.OnPlasma;
            @Plasma.canceled -= instance.OnPlasma;
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
            @Hability.started -= instance.OnHability;
            @Hability.performed -= instance.OnHability;
            @Hability.canceled -= instance.OnHability;
            @BaseAttack.started -= instance.OnBaseAttack;
            @BaseAttack.performed -= instance.OnBaseAttack;
            @BaseAttack.canceled -= instance.OnBaseAttack;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLock(InputAction.CallbackContext context);
        void OnChangeTarget(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnGas(InputAction.CallbackContext context);
        void OnLiquid(InputAction.CallbackContext context);
        void OnSolid(InputAction.CallbackContext context);
        void OnPlasma(InputAction.CallbackContext context);
        void OnTransform(InputAction.CallbackContext context);
        void OnHability(InputAction.CallbackContext context);
        void OnBaseAttack(InputAction.CallbackContext context);
    }
}
